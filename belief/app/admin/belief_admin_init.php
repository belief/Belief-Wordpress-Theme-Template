<?php
  /**
   *  WARNING: This file is part of the core belief_theme_slug Theme Framework. DO NOT edit this file under any circumstances. Please do all modifications in the form of a child theme.
   *
   * File contains initialization of belief_theme_slug Design features created at init hook
   *
   *
   * Add Theme Admin Menu
   * @link http://codex.wordpress.org/Settings_API
   *
   * @package WordPress
   * @subpackage Belief Theme
   * @author  BeliefAgency
   * @license GPL-2.0+
   * @since Belief Theme Theme 1.1
   */
  

/**
 *  Structure for admin
 * 
 */
class Belief_Admin_Init {
  public $instance;

  public function __construct() {
    $this->instance =& $this;

    //initialize structure of admin
    add_action( 'init', array( $this, 'initialize' ) );

    //add custom hook for image insertion
    add_filter( 'image_send_to_editor', array($this, 'html5_insert_image'), 10, 9 );

    add_action('admin_init', array($this, 'belief_capabilities_mod') );

    add_action('admin_menu', array($this, 'belief_menu_mod') );

    add_action('admin_head', array($this, 'belief_hide_add_button') );

    add_action('admin_menu', array($this, 'belief_redirect') );

    add_action('admin_init', array($this, 'belief_restrict_notice') );

  }

  public function initialize() {
    add_action( 'admin_menu', array( $this, 'belief_settings_api_init') );

    add_action( 'admin_init', array( $this, 'belief_initialize_theme_options' ) );

  }

  /**
      Dashboard Menu

  */

  public function belief_settings_api_init() {
    add_theme_page(
      'Edit ' . BELIEF_THEME_TITLE .' Theme',          // The title to be displayed in the browser window for this page.
      BELIEF_THEME_TITLE.' Theme',          // The text to be displayed for this menu item
      'administrator',          // Which type of users can see this menu item
      BELIEF_THEME_SLUG.'_theme_options',      // The unique ID - that is, the slug - for this menu item
      array( $this, BELIEF_THEME_SLUG.'_theme_inputs')       // The name of the function to call when rendering this menu's page
    );

    add_menu_page(
      'Edit ' . BELIEF_THEME_TITLE .' Theme',          // The value used to populate the browser's title bar when the menu page is active
      BELIEF_THEME_TITLE.' Theme',          // The text of the menu in the administrator's sidebar
      'administrator',          // What roles are able to access the menu
      BELIEF_THEME_SLUG.'_theme_menu',       // The ID used to bind submenu items to this menu
      array( $this, BELIEF_THEME_SLUG.'_theme_inputs')       // The callback function used to render this menu
    );
  }



  /**
      Setup Theme Options

  */
 

  public function belief_theme_inputs() {
  ?>
   <div class="wrap">

     <div id="icon-themes" class="icon32"></div>
     <h2><?php _e( BELIEF_THEME_TITLE.' Theme Options' ); ?></h2>
     <?php settings_errors(); ?>

     <form method="post" action="options.php">
       <?php

         settings_fields( BELIEF_THEME_SLUG.'_theme_inputs_options' );
         do_settings_sections( BELIEF_THEME_SLUG.'_theme_inputs_options' );
         submit_button();

       ?>
     </form>
   </div>
  <?php
  }

  public function belief_initialize_default_theme_options() {
    $defaults = array(
      'processheader' => '',
      'processdescription' => '',
      'aboutbelief_theme_slug' => '',
      'contactbelief_theme_slug' => '',
      'heromp4link' => '',
      'herowebmlink' => '',
      'belief_theme_slugaddress' => '',
      'belief_theme_slugemail' => '',
      'belief_theme_slugphone' => ''
    );
    update_option( BELIEF_THEME_SLUG.'_theme_inputs_options', $defaults );
  }

  public function belief_initialize_theme_options() {
    if( false == get_option( BELIEF_THEME_SLUG.'_theme_inputs_options' ) ) {
      $this->belief_initialize_default_theme_options();
    }

    add_settings_section(
      BELIEF_THEME_SLUG.'_info_section',
      __( 'Info'),
      array( $this, 'belief_info_callback'),
      BELIEF_THEME_SLUG.'_theme_inputs_options'
    );

    add_settings_field(
      'heromp4link',
      __( 'Hero mp4 URL' ),
      array( $this, 'belief_hero_mp4_callback'),
      BELIEF_THEME_SLUG.'_theme_inputs_options',
      BELIEF_THEME_SLUG.'_info_section'
    );

    add_settings_field(
      'herowebmlink',
      __( 'Hero Webm URL'),
      array( $this, 'belief_hero_webm_callback'),
      BELIEF_THEME_SLUG.'_theme_inputs_options',
      BELIEF_THEME_SLUG.'_info_section'
    );
  }

  /*------------------------------------------------------------------------ *
   * Section Callbacks
   * ------------------------------------------------------------------------
   */

  public function belief_info_callback() {
    echo '<p>' . __( 'Administrative settings for belief_theme_slug Design') . '</p>';
  }

  public function belief_hero_mp4_callback() {
    $options = get_option( BELIEF_THEME_SLUG.'_theme_inputs_options' );
    $url = '';
    if( isset( $options['heromp4link'] ) ) {
      $url = esc_url( $options['heromp4link'] );
    }

    echo '<input name="'.BELIEF_THEME_SLUG.'_theme_inputs_options[heromp4link]" type="text" id="heromp4link" value="' . $url . '" class="large-text code">
        <p class="description">direct link to the mp4 video for the preview hero.</p>';
  }

  public function belief_hero_webm_callback() {
    $options = get_option( BELIEF_THEME_SLUG.'_theme_inputs_options' );
    $url = '';
    if( isset( $options['herowebmlink'] ) ) {
      $url = esc_url( $options['herowebmlink'] );
    }

    echo '<input name="'.BELIEF_THEME_SLUG.'_theme_inputs_options[herowebmlink]" type="text" id="herowebmlink" value="' . $url . '" class="large-text code">
        <p class="description">direct link to the mp4 video for the preview hero.</p>';
  }

  /* ------------------------------------------------------------------------ *
   * Input Validations
   * ------------------------------------------------------------------------ */

  public function belief_options_validate_inputs( $input ) {

    // Create our array for storing the validated options
    $output = array();

    // Loop through each of the incoming options
    foreach( $input as $key => $value ) {

      // Check to see if the current option has a value. If so, process it.
      if( isset( $input[$key] ) ) {

        // Strip all HTML and PHP tags and properly handle quoted strings
        $output[$key] = strip_tags( stripslashes( $input[ $key ] ) );

      } // end if

    } // end foreach

    // Return the array processing any additional functions filtered by this action
    return apply_filters( 'belief_theme_slug_theme_validate_inputs', $output, $input );

  }

  /**
      Post Type Hooks

  */

  /*
   * Modify Insert Media into post with custom attributes
   */
  public function html5_insert_image($html, $id, $caption, $title, $align, $url, $size) {

      $image_attributes = wp_get_attachment_image_src( $id , 'full'); 
      $html5 = "<figure id='post-$id media-$id' class='figure align$align'>";
      $html5 .=  "<img id='post-$id media-$id' class='post-img-full-width align$align' src='$image_attributes[0]' width='100%'>";
      if ($caption) {
          $html5 .= "<figcaption>$caption</figcaption>";
      }
      $html5 .= "</figure>";
      return $html5;
  }

  /**
      Permissions & Redirects

  */

  /**
  * Modify Permissions
  * @link http://codex.wordpress.org/Function_Reference/add_meta_box
  * Credit to Belief Agency
  *
  */
  public function belief_capabilities_mod() {
    $editor_role = get_role('editor');
    $editor_role -> remove_cap('publish_pages');
    $editor_role -> add_cap('add_users');
    $editor_role -> add_cap('create_users');

    $author_role = get_role('author');
    $author_role -> remove_cap('publish_pages');
  }

  public function belief_menu_mod() {
    global $submenu;
    unset($submenu['edit.php?post_type=page'][10]);
    $submenu['edit.php?post_type=page'][10][1] = 'publish_pages';
  }

  public function belief_hide_add_button() {
    global $current_screen;
    if($current_screen->post_type == 'page' && !current_user_can('publish_pages')) {
      echo '<style>.add-new-h2{display: none;}</style>';
    }
  }

  public function belief_redirect() {
    $result = stripos($_SERVER['REQUEST_URI'], 'post-new.php?post_type=page');
    if ($result!==false && !current_user_can('publish_pages')) {
      wp_redirect(get_option('siteurl') . '/wp-admin/index.php?permissions_error=true');
    }
  }

  public function belief_restrict_notice() {
    if( isset($_GET['permissions_error']) ) {
      echo "<div id='permissions-warning' class='error fade'><p><strong>".__('You do not have permission for this access.')."</strong></p></div>";
    }
  }
}

new Belief_Admin_Init;
